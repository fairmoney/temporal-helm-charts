{{- if and  $.Values.server.config.tls $.Values.certManager (not $.Values.dev)}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ $.Release.Namespace }}
  name: k8s-{{ $.Release.Name }}-store-role
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - selfsubjectrulesreviews
  verbs:
  - create
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-provider-temporal-creds
  namespace: {{ $.Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: external-secret-{{ $.Release.Name }}-binding
  namespace: {{ $.Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-{{ $.Release.Name }}-store-role
subjects:
- kind: ServiceAccount
  name: external-secrets-provider-temporal-creds
  namespace: temporal
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: k8s-{{ $.Release.Name }}
spec:
  provider:
    kubernetes:
      remoteNamespace: {{ $.Release.Namespace }}
      server:
        caProvider:
          namespace: {{ $.Release.Namespace }}
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: external-secrets-provider-temporal-creds
          namespace: {{ $.Release.Namespace }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: provider-temporal-config-creds
  namespace: crossplane-system
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: k8s-{{ $.Release.Name }}
  target:
    name: provider-temporal-config-creds
    template:
      engineVersion: v2
      templateFrom:
        - configMap:
            name: provider-temporal-config-creds-template
            items:
            - key: credentials
  data:
  - secretKey: cacert
    remoteRef:
      key: {{ $.Release.Name }}-provider-cert
      property: ca.crt
  - secretKey: certfile
    remoteRef:
      key: {{ $.Release.Name }}-provider-cert
      property: tls.crt
  - secretKey: keyfile
    remoteRef:
      key: {{ $.Release.Name }}-provider-cert
      property: tls.key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: provider-temporal-config-creds-template
  namespace: crossplane-system
data:
  credentials: |
      {"HostPort":"{{ include "temporal.componentname" (list . "frontend") }}.{{ $.Release.Namespace }}:7233","UseTLS":true,"CACertPem":{{ `{{ .cacert | toJson }}` }},"CertPem":{{ `{{ .certfile | toJson }}` }},"KeyPem":{{ `{{ .keyfile | toJson }}` }}}
{{- end }}
